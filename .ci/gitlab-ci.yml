# THIS FILE IS AUTOGENERATED -- DO NOT EDIT #
#   Edit and Re-run .ci/template.gitlab-ci.yml.py instead       #

stages:
  - sanity
  - base
  # - modules
  - wheels
  - test
  - publish

variables:
  GIT_SUBMODULE_STRATEGY: none
  ML_TAG: 4c42d22a2aefc41ab1d52f2c4b9df09cb3b8a6af
  WHEEL_DIR: ${CI_PROJECT_DIR}/wheelhouse
  DUNE_BUILD_DIR: ${CI_PROJECT_DIR}/build
  DUNE_SRC_DIR: ${CI_PROJECT_DIR}

.docker-in-docker:
    retry:
        max: 2
        when:
            - runner_system_failure
            - api_failure
            - unknown_failure
    image: docker:stable
    variables:
        DOCKER_HOST: tcp://docker:2375/
        DOCKER_DRIVER: overlay2
    before_script:
        - apk --update add py3-pip openssh-client rsync git file bash python3 py3-cffi py3-cryptography
        - pip3 install -U docker jinja2 docopt twine
        - echo $DOCKER_PW | docker login --username="$DOCKER_USER" --password-stdin
        - git submodule update --init .ci/shared
        - 'export SHARED_PATH="${CI_PROJECT_DIR}/shared"'
        - mkdir -p ${SHARED_PATH}
    services:
        - docker:dind
    environment:
        name: unsafe
    tags:
      - dind
      - amm-only
    # stage: modules
    script: .ci/shared/docker/update_test_dockers.py ${MODULE_NAME}

sanity:
  stage: sanity
  image: harbor.uni-muenster.de/proxy-docker/library/alpine:3.15
  before_script:
    - apk add git py3-pip
    - pip3 install jinja2
  script:
    - ./.ci/template.gitlab-ci.yml.py && git diff --exit-code .ci/gitlab-ci.yml

base:
    extends: .docker-in-docker
    stage: base
    variables:
      MODULE_NAME: BASE

# gdt:
#     extends: .docker-in-docker
#     variables:
#       MODULE_NAME: dune-gdt

# super:
#   extends: .docker-in-docker
#   variables:
#     BASE: debian
#     IMAGE: dunecommunity/gdt-super_${BASE}:${CI_COMMIT_SHA}
#   script: |
#     docker build --build-arg BASE=${BASE} -t ${IMAGE} -f .ci/shared/docker/super_docker/Dockerfile .
#     docker push ${IMAGE}

.wheels_base:
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    LOCAL_UID: 0
    TWINE_PASSWORD: ${CI_JOB_TOKEN}
    TWINE_USERNAME: gitlab-ci-token
    GITLAB_PYPI: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi/
  stage: wheels
  image: zivgitlab.wwu.io/ag-ohlberger/dune-community/docker/manylinux-2014_py${GDT_PYTHON_VERSION}:${ML_TAG}
  needs: []
  cache:
    paths:
      - ccache
    when: 'always'
    key: ${GDT_PYTHON_VERSION}_${ML_TAG}
  artifacts:
    expire_in: 1 day
    paths:
      - ninja_log_*.tar.gz
      - ${WHEEL_DIR}/final/dune*whl
  after_script:
    - tar cfz ninja_log_${STEP}_${GDT_PYTHON_VERSION}.tar.gz ${DUNE_BUILD_DIR}/dune-*/.ninja_log || true

.test_base:
  image: pymor/testing_py${GDT_PYTHON_VERSION}:latest
  stage: test
  script:
    - pip install ${WHEEL_DIR}/final/dune*whl
    - python -c 'from dune.xt import *'
    - python -c 'from dune.gdt import *'




all 3.7:
  extends: .wheels_base
  variables:
    GDT_PYTHON_VERSION: "3.7"
    STEP: all

  
  script: ./make_wheels.bash all


  artifacts:
    paths:
      - ${DUNE_BUILD_DIR}







xt 3.7:
  extends: .wheels_base
  variables:
    GDT_PYTHON_VERSION: "3.7"
    STEP: xt

  needs:
  - all 3.7

  dependencies: ["all 3.7"]

  
  script: ./make_wheels.bash xt





wheel collect xt 3.7:
  stage: wheels
  dependencies: ["xt 3.7"]
  needs: ["xt 3.7"]
  image: harbor.uni-muenster.de/proxy-docker/library/alpine:3.15
  script:
    - rm -rf ${DUNE_BUILD_DIR}
  artifacts:
    paths:
      - ${WHEEL_DIR}/final/dune*whl



gdt 3.7:
  extends: .wheels_base
  variables:
    GDT_PYTHON_VERSION: "3.7"
    STEP: gdt

  needs:
  - all 3.7

  - xt 3.7

  dependencies: ["all 3.7"]

  
  script: ./make_wheels.bash gdt





wheel collect gdt 3.7:
  stage: wheels
  dependencies: ["gdt 3.7"]
  needs: ["gdt 3.7"]
  image: harbor.uni-muenster.de/proxy-docker/library/alpine:3.15
  script:
    - rm -rf ${DUNE_BUILD_DIR}
  artifacts:
    paths:
      - ${WHEEL_DIR}/final/dune*whl




test wheels 3.7:
  extends: .test_base
  variables:
    GDT_PYTHON_VERSION: "3.7"
  needs: ["wheel collect gdt 3.7", "wheel collect xt 3.7"]
  dependencies: ["wheel collect gdt 3.7", "wheel collect xt 3.7"]




all 3.8:
  extends: .wheels_base
  variables:
    GDT_PYTHON_VERSION: "3.8"
    STEP: all

  
  script: ./make_wheels.bash all


  artifacts:
    paths:
      - ${DUNE_BUILD_DIR}







xt 3.8:
  extends: .wheels_base
  variables:
    GDT_PYTHON_VERSION: "3.8"
    STEP: xt

  needs:
  - all 3.8

  dependencies: ["all 3.8"]

  
  script: ./make_wheels.bash xt





wheel collect xt 3.8:
  stage: wheels
  dependencies: ["xt 3.8"]
  needs: ["xt 3.8"]
  image: harbor.uni-muenster.de/proxy-docker/library/alpine:3.15
  script:
    - rm -rf ${DUNE_BUILD_DIR}
  artifacts:
    paths:
      - ${WHEEL_DIR}/final/dune*whl



gdt 3.8:
  extends: .wheels_base
  variables:
    GDT_PYTHON_VERSION: "3.8"
    STEP: gdt

  needs:
  - all 3.8

  - xt 3.8

  dependencies: ["all 3.8"]

  
  script: ./make_wheels.bash gdt





wheel collect gdt 3.8:
  stage: wheels
  dependencies: ["gdt 3.8"]
  needs: ["gdt 3.8"]
  image: harbor.uni-muenster.de/proxy-docker/library/alpine:3.15
  script:
    - rm -rf ${DUNE_BUILD_DIR}
  artifacts:
    paths:
      - ${WHEEL_DIR}/final/dune*whl




test wheels 3.8:
  extends: .test_base
  variables:
    GDT_PYTHON_VERSION: "3.8"
  needs: ["wheel collect gdt 3.8", "wheel collect xt 3.8"]
  dependencies: ["wheel collect gdt 3.8", "wheel collect xt 3.8"]




all 3.9:
  extends: .wheels_base
  variables:
    GDT_PYTHON_VERSION: "3.9"
    STEP: all

  
  script: ./make_wheels.bash all


  artifacts:
    paths:
      - ${DUNE_BUILD_DIR}







xt 3.9:
  extends: .wheels_base
  variables:
    GDT_PYTHON_VERSION: "3.9"
    STEP: xt

  needs:
  - all 3.9

  dependencies: ["all 3.9"]

  
  script: ./make_wheels.bash xt





wheel collect xt 3.9:
  stage: wheels
  dependencies: ["xt 3.9"]
  needs: ["xt 3.9"]
  image: harbor.uni-muenster.de/proxy-docker/library/alpine:3.15
  script:
    - rm -rf ${DUNE_BUILD_DIR}
  artifacts:
    paths:
      - ${WHEEL_DIR}/final/dune*whl



gdt 3.9:
  extends: .wheels_base
  variables:
    GDT_PYTHON_VERSION: "3.9"
    STEP: gdt

  needs:
  - all 3.9

  - xt 3.9

  dependencies: ["all 3.9"]

  
  script: ./make_wheels.bash gdt





wheel collect gdt 3.9:
  stage: wheels
  dependencies: ["gdt 3.9"]
  needs: ["gdt 3.9"]
  image: harbor.uni-muenster.de/proxy-docker/library/alpine:3.15
  script:
    - rm -rf ${DUNE_BUILD_DIR}
  artifacts:
    paths:
      - ${WHEEL_DIR}/final/dune*whl




test wheels 3.9:
  extends: .test_base
  variables:
    GDT_PYTHON_VERSION: "3.9"
  needs: ["wheel collect gdt 3.9", "wheel collect xt 3.9"]
  dependencies: ["wheel collect gdt 3.9", "wheel collect xt 3.9"]




all 3.10:
  extends: .wheels_base
  variables:
    GDT_PYTHON_VERSION: "3.10"
    STEP: all

  
  script: ./make_wheels.bash all


  artifacts:
    paths:
      - ${DUNE_BUILD_DIR}







xt 3.10:
  extends: .wheels_base
  variables:
    GDT_PYTHON_VERSION: "3.10"
    STEP: xt

  needs:
  - all 3.10

  dependencies: ["all 3.10"]

  
  script: ./make_wheels.bash xt





wheel collect xt 3.10:
  stage: wheels
  dependencies: ["xt 3.10"]
  needs: ["xt 3.10"]
  image: harbor.uni-muenster.de/proxy-docker/library/alpine:3.15
  script:
    - rm -rf ${DUNE_BUILD_DIR}
  artifacts:
    paths:
      - ${WHEEL_DIR}/final/dune*whl



gdt 3.10:
  extends: .wheels_base
  variables:
    GDT_PYTHON_VERSION: "3.10"
    STEP: gdt

  needs:
  - all 3.10

  - xt 3.10

  dependencies: ["all 3.10"]

  
  script: ./make_wheels.bash gdt





wheel collect gdt 3.10:
  stage: wheels
  dependencies: ["gdt 3.10"]
  needs: ["gdt 3.10"]
  image: harbor.uni-muenster.de/proxy-docker/library/alpine:3.15
  script:
    - rm -rf ${DUNE_BUILD_DIR}
  artifacts:
    paths:
      - ${WHEEL_DIR}/final/dune*whl




test wheels 3.10:
  extends: .test_base
  variables:
    GDT_PYTHON_VERSION: "3.10"
  needs: ["wheel collect gdt 3.10", "wheel collect xt 3.10"]
  dependencies: ["wheel collect gdt 3.10", "wheel collect xt 3.10"]



.publish:
  image: alpine:3.15
  dependencies:

  -  "wheel collect gdt 3.7"
  -  "wheel collect xt 3.7"

  -  "wheel collect gdt 3.8"
  -  "wheel collect xt 3.8"

  -  "wheel collect gdt 3.9"
  -  "wheel collect xt 3.9"

  -  "wheel collect gdt 3.10"
  -  "wheel collect xt 3.10"

  needs:

  -  "wheel collect gdt 3.7"
  -  "wheel collect xt 3.7"
  -  "test wheels 3.7"

  -  "wheel collect gdt 3.8"
  -  "wheel collect xt 3.8"
  -  "test wheels 3.8"

  -  "wheel collect gdt 3.9"
  -  "wheel collect xt 3.9"
  -  "test wheels 3.9"

  -  "wheel collect gdt 3.10"
  -  "wheel collect xt 3.10"
  -  "test wheels 3.10"

  stage: publish
  before_script:
      - apk --update add py3-pip git file bash python3 py3-cffi py3-cryptography
      - pip3 install -U twine
  variables:
    TWINE_PASSWORD: ${TWINE_PASSWORD}
    TWINE_USERNAME: ${TWINE_USERNAME}
  script:
    - cd ${MOD_DIR}
    # upload only if a tag points to checked out commit
    - (git describe --exact-match --tags HEAD && python3 -m twine upload ${WHEEL_DIR}/final/${MOD_WHEEL_PREFIX}*whl) || echo "not uploading untagged wheels"
  artifacts:
    paths:
      - ${WHEEL_DIR}/final/${MOD_WHEEL_PREFIX}*whl

publish dune-xt:
  extends: .publish
  variables:
    MOD_WHEEL_PREFIX: dune_xt
    MOD_DIR: dune-xt

publish dune-gdt:
  extends: .publish
  variables:
    MOD_WHEEL_PREFIX: dune_gdt
    MOD_DIR: dune-gdt


# THIS FILE IS AUTOGENERATED -- DO NOT EDIT #
#   Edit and Re-run .ci/template.gitlab-ci.yml.py instead       #
