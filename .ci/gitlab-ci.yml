stages:
  - base
  # - modules
  - wheels
  - publish

variables:
  GIT_SUBMODULE_STRATEGY: none

.docker-in-docker:
    retry:
        max: 2
        when:
            - runner_system_failure
            - api_failure
            - unknown_failure
    image: docker:stable
    variables:
        DOCKER_HOST: tcp://docker:2375/
        DOCKER_DRIVER: overlay2
    before_script:
        - apk --update add py3-pip openssh-client rsync git file bash python3 py3-cffi py3-cryptography
        - pip3 install -U docker jinja2 docopt twine
        - echo $DOCKER_PW | docker login --username="$DOCKER_USER" --password-stdin
        - git submodule update --init .ci/shared
        - 'export SHARED_PATH="${CI_PROJECT_DIR}/shared"'
        - mkdir -p ${SHARED_PATH}
    services:
        - docker:dind
    environment:
        name: unsafe
    tags:
      - dind
      - amm-only
    # stage: modules
    script: .ci/shared/docker/update_test_dockers.py ${MODULE_NAME}

base:
    extends: .docker-in-docker
    stage: base
    variables:
      MODULE_NAME: BASE

# gdt:
#     extends: .docker-in-docker
#     variables:
#       MODULE_NAME: dune-gdt

# super:
#   extends: .docker-in-docker
#   variables:
#     BASE: debian
#     IMAGE: dunecommunity/gdt-super_${BASE}:${CI_COMMIT_SHA}
#   script: |
#     docker build --build-arg BASE=${BASE} -t ${IMAGE} -f .ci/shared/docker/super_docker/Dockerfile .
#     docker push ${IMAGE}

.wheels_base:
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    TWINE_PASSWORD: ${CI_JOB_TOKEN}
    TWINE_USERNAME: gitlab-ci-token
    GITLAB_PYPI: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi/
    LOCAL_USER: dxt
  stage: wheels
  needs: []
  extends: .docker-in-docker
  # try to download from gitlab first, then pypi
  before_script:
    - !reference [.docker-in-docker, before_script]
    - export PIP_CONFIG_FILE=${SHARED_PATH}/pip.conf
    - sed "s;PYPI_INDEX_URL;${GITLAB_PYPI}/simple;g" .ci/pip.conf > ${PIP_CONFIG_FILE}
  script:
    - ./make_docker_wheels.bash xt
    - python3 -m twine check docker/wheelhouse/final/*xt*.whl
    - python3 -m twine upload --repository-url ${GITLAB_PYPI} docker/wheelhouse/final/*xt*.whl
    - ./make_docker_wheels.bash gdt
    - python3 -m twine check docker/wheelhouse/final/*gdt*.whl
    - python3 -m twine upload --repository-url ${GITLAB_PYPI} docker/wheelhouse/final/*gdt*.whl
  artifacts:
    paths:
      - docker/wheelhouse/final/*.whl
  cache:
    paths:
      - docker/cache

wheels 3.7:
  extends: .wheels_base
  variables:
    GDT_PYTHON_VERSION: "3.7"
  cache:
    key: $CI_COMMIT_REF_SLUG_3.7

wheels 3.8:
  extends: .wheels_base
  variables:
    GDT_PYTHON_VERSION: "3.8"
  cache:
    key: $CI_COMMIT_REF_SLUG_3.8

wheels 3.9:
  extends: .wheels_base
  variables:
    GDT_PYTHON_VERSION: "3.9"
  cache:
    key: $CI_COMMIT_REF_SLUG_3.9

.publish:
  image: alpine:3.15
  dependencies: ["wheels 3.9", "wheels 3.8", "wheels 3.7"]
  needs: ["wheels 3.9", "wheels 3.8", "wheels 3.7"]
  stage: publish
  before_script:
      - apk --update add py3-pip git file bash python3 py3-cffi py3-cryptography
      - pip3 install -U twine
  variables:
    TWINE_PASSWORD: ${TWINE_PASSWORD}
    TWINE_USERNAME: ${TWINE_USERNAME}
  script: 
    - cd ${MOD_DIR}
    # upload only if a tag points to checked out commit
    - (git describe --exact-match --tags HEAD && python3 -m twine upload docker/wheelhouse/final/${MOD_WHEEL_PREFIX}*whl) || echo "not uploading untagged wheels"
  artifacts:
    paths:
      - docker/wheelhouse/final/${MOD_WHEEL_PREFIX}*whl
    
publish dune-xt:
  extends: .publish
  variables:
    MOD_WHEEL_PREFIX: dune_xt
    MOD_DIR: dune-xt

publish dune-gdt:
  extends: .publish
  variables:
    MOD_WHEEL_PREFIX: dune_gdt
    MOD_DIR: dune-gdt
